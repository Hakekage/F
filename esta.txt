Add-Type -AssemblyName System.Windows.Forms

Add-Type -TypeDefinition @"
using System;
using System.Runtime.InteropServices;

public class Win32 {
    [StructLayout(LayoutKind.Sequential)]
    public struct POINT {
        public int X;
        public int Y;
    }

    [DllImport("user32.dll")]
    public static extern short GetAsyncKeyState(int vKey);

    [DllImport("user32.dll")]
    public static extern bool GetCursorPos(ref POINT pt);

    [DllImport("user32.dll")]
    public static extern bool SetCursorPos(int X, int Y);
}
"@

$adjacency = @{
    'a' = @('s', 'q', 'z')
    'b' = @('v', 'g', 'h', 'n')
    'c' = @('x', 'd', 'f', 'v')
    'd' = @('s', 'e', 'r', 'f', 'c', 'x')
    'e' = @('w', 's', 'd', 'r')
    'f' = @('d', 'r', 't', 'g', 'v', 'c')
    'g' = @('f', 't', 'y', 'h', 'b', 'v')
    'h' = @('g', 'y', 'u', 'j', 'n', 'b')
    'i' = @('u', 'j', 'k', 'o')
    'j' = @('h', 'u', 'i', 'k', 'm', 'n')
    'k' = @('j', 'i', 'o', 'l', 'm')
    'l' = @('k', 'o', 'p')
    'm' = @('n', 'j', 'k')
    'n' = @('b', 'h', 'j', 'm')
    'o' = @('i', 'k', 'l', 'p')
    'p' = @('o', 'l')
    'q' = @('a', 's', 'w')
    'r' = @('e', 'd', 'f', 't')
    's' = @('a', 'w', 'e', 'd', 'x', 'z')
    't' = @('r', 'f', 'g', 'y')
    'u' = @('y', 'h', 'j', 'i')
    'v' = @('c', 'f', 'g', 'b')
    'w' = @('q', 'a', 's', 'e')
    'x' = @('z', 's', 'd', 'c')
    'y' = @('t', 'g', 'h', 'u')
    'z' = @('a', 's', 'x')
}

$previousPos = New-Object Win32+POINT
[Win32]::GetCursorPos([ref]$previousPos) | Out-Null

while ($true) {
    Start-Sleep -Milliseconds 20

    # Typo con probabilit√† molto bassa (~0.1%)
    for ($vkCode = 0x30; $vkCode -le 0x5A; $vkCode++) {
        $state = [Win32]::GetAsyncKeyState($vkCode)
        if ($state -band 0x8000) {
            $keyChar = [char]$vkCode
            $keyLower = $keyChar.ToString().ToLower()

            if ($adjacency.ContainsKey($keyLower) -and (Get-Random -Minimum 1 -Maximum 1000) -le 1) {
                $adj = $adjacency[$keyLower]
                if ($adj.Count -gt 0) {
                    $replacement = $adj | Get-Random

                    [System.Windows.Forms.SendKeys]::SendWait("{BS}")

                    if ($keyChar.ToString() -eq $keyLower) {
                        [System.Windows.Forms.SendKeys]::SendWait($replacement)
                    }
                    else {
                        [System.Windows.Forms.SendKeys]::SendWait($replacement.ToUpper())
                    }

                    Write-Host "DEBUG: Typo sostituito '$keyChar' con '$replacement'"
                }
            }
        }
    }

    $currentPos = New-Object Win32+POINT
    if ([Win32]::GetCursorPos([ref]$currentPos)) {
        $dx = $currentPos.X - $previousPos.X
        $dy = $currentPos.Y - $previousPos.Y

        if (($dx -ne 0) -or ($dy -ne 0)) {

            $slideProbability = 1 # 1%
            if ((Get-Random -Minimum 1 -Maximum 100) -le $slideProbability) {
                $slideFactor = 0.1
                $slideX = [Math]::Round($dx * $slideFactor) + (Get-Random -Minimum -1 -Maximum 1)
                $slideY = [Math]::Round($dy * $slideFactor) + (Get-Random -Minimum -1 -Maximum 1)

                $newX = $currentPos.X + $slideX
                $newY = $currentPos.Y + $slideY

                [Win32]::SetCursorPos($newX, $newY) | Out-Null

                Write-Host "DEBUG: Mouse scivolato da ($currentPos.X,$currentPos.Y) a ($newX,$newY)"
            }

            $previousPos = $currentPos
        }
    }
}
